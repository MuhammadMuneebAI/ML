# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14LUZNKA8GtmugI77e8yce2SprTipN7uK
"""

import streamlit as st
import pandas as pd
import numpy as np
import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split

# Load CSV data
df = pd.read_csv("dataset.csv")  # Make sure this file is uploaded to GitHub with your app

# Drop unnecessary column if present
if 'Unnamed: 0' in df.columns:
    df.drop(columns=['Unnamed: 0'], inplace=True)

# Fill missing numeric values
df.fillna(df.mean(numeric_only=True), inplace=True)

# Split data
X = df.drop("TenYearCHD", axis=1)
y = df["TenYearCHD"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train model
model = RandomForestClassifier(n_estimators=200, random_state=42)
model.fit(X_train, y_train)

# Streamlit UI
st.title("‚ù§ Ten-Year Coronary Heart Disease (CHD) Risk Predictor")

input_data = {}
for col in X.columns:
    input_data[col] = st.number_input(f"{col}", value=float(df[col].mean()))

if st.button("Predict"):
    input_df = pd.DataFrame([input_data])
    prediction = model.predict(input_df)[0]
    probability = model.predict_proba(input_df)[0][1]

    result = "Positive" if prediction == 1 else "Negative"
    st.success(f"üß† Predicted CHD Risk: *{result}* ({round(probability * 100, 2)}% chance)")

    # Save prediction history
    history_df = input_df.copy()
    history_df["Prediction"] = result
    history_df["Probability (%)"] = round(probability * 100, 2)

    if os.path.exists("search_history.csv"):
        existing = pd.read_csv("search_history.csv")
        history_df = pd.concat([existing, history_df], ignore_index=True)

    history_df.to_csv("search_history.csv", index=False)

if st.button("View History"):
    if os.path.exists("search_history.csv"):
        st.subheader("üìú Prediction History")
        st.dataframe(pd.read_csv("search_history.csv"))
    else:
        st.info("No history found yet.")